app:
  greetings:
    default-language: "null" # note that "null" must be enclosed by quotation marks, as it would be unset otherwise
    unknown-language: "unknown" # note that key should not be camelCase, as uppercase characters may lead to problems in configuration binding
    persons:
      some-duration: 42m
      some-text: "foo"
      some-integer: 12
      some-double: 12.3

  security:
    configurable-credential-authentication:
      username: "SECRET_USERNAME"
      password: "SECRET_PASSWORD"

micronaut:
  application:
    name: greeter
    instance:
      id: ${random.shortuuid} # instance ID should be set random if Consul registration is active to avoid collisions (default ID would be the port number)
  server:
    port: 8080 # default: -1 (random port)
    cors:
      enabled: true # default: false
  router:
    static-resources:
      # YAML file will be available at http://localhost:8080/swagger/greeter-microservice-0.1.yml
      # where "greeter-microservice-0.1" is derived from the Title and Version attributes of @OpenAPIDefinition
      # TODO: does not seem to work if security is enabled and Auth-Header set?
      swagger:
        paths: classpath:META-INF/swagger
        mapping: /swagger/**
  security:
    enabled: true # default: false
#  http:
#    services: # manual service discovery
#      foo: # service ID
#        urls: # environment variable list would be MICRONAUT_HTTP_SERVICES_FOO_URLS=http://prod1,http://prod2
#          - http://foo1
#          - http://foo2

logger:
  levels:
    de.debuglevel: DEBUG
    io.micronaut.http.server: DEBUG
    io.micronaut.data.query: DEBUG
    # io.micronaut.context.condition: DEBUG # log information about loading conditional beans

jackson:
  serialization-inclusion: NON_ABSENT # omit null and Optional.empty() in JSON, but include empty collections and empty strings
  # serialization-inclusion: ALWAYS # include empty collections, empty strings, null and Optional.empty(); see docs of com.fasterxml.jackson.annotation.JsonInclude.Include for other behaviors
  serialization:
    indentOutput: true
    writeDatesAsTimestamps: false # write DateTimes as ISO 8601 "2020-07-26T21:37:09.39" instead of an array of numbers

# default values of consul section only apply if io.micronaut:micronaut-discovery-client is available
consul:
  client:
    health-check: false # check if Consul is alive; should be true if Consul is used (default: true; other health checks get active as soon as discovery.enabled=true)
    registration: # register this service on Consul
      enabled: false # default: true
    discovery: # search for services on Consul if their id is provided (e.g. Micronaut declarative clients)
      enabled: false # default: true
    defaultZone: "${CONSUL_HOST:localhost}:${CONSUL_PORT:8500}" # Consul server to use for service registration and discovery

datasources:
  # H2
  default:
    # for H2 in-memory behaviour and options see http://www.h2database.com/html/features.html#in_memory_databases
    url: jdbc:h2:mem:developmentDatabase;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE
    # store H2 in a file "/db/developmentDatabase.mv.db"
    #url: jdbc:h2:file:/db/developmentDatabase;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE
    #url: jdbc:h2:file:./developmentDatabase;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: ""
    # CREATE      Create the schema if it doesn't exist.
    # CREATE_DROP Drop and recreate the schema.
    # NONE        Do nothing.
    schema-generate: CREATE_DROP
    dialect: H2
#  # Apache Derby
#  default:
#    url: jdbc:derby:memory:developmentDatabase;create=true
#    driver-class-name: org.apache.derby.jdbc.EmbeddedDriver
#    username: sa
#    password: ''
#    schema-generate: CREATE_DROP
#    dialect: Derby
#  # HSQL
#  default:
#    url: jdbc:hsqldb:mem:developmentDatabase
#    driver-class-name: org.hsqldb.jdbc.JDBCDriver
#    username: sa
#    password: ''
#    schema-generate: CREATE_DROP
#    dialect: HSQL
#  # MariaDB
#  default:
#    url: jdbc:mariadb://localhost:3306/db
#    driver-class-name: org.mariadb.jdbc.Driver
#    username: user
#    password: password
#    schema-generate: CREATE_DROP
#    dialect: MariaDB103
#  # PostgreSQL
#  default:
#    url: jdbc:postgresql://localhost:5432/db
#    driver-class-name: org.postgresql.Driver
#    username: user
#    password: password
#    schema-generate: CREATE_DROP
#    dialect: PostgreSQL95

jpa:
  default:
    properties:
      hibernate:
        bytecode:
          provider: none
        hbm2ddl:
          # See https://docs.jboss.org/hibernate/orm/5.4/javadocs/org/hibernate/tool/schema/Action.html
          # From https://www.baeldung.com/spring-boot-data-sql-and-schema-sql#controlling-database-creation-using-hibernate
          # create      Hibernate first drops existing tables, then creates new tables
          # update      the object model created based on the mappings (annotations or XML) is compared with the existing schema, and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no more required by the application
          # create-drop similar to create, with the addition that Hibernate will drop the database after all operations are completed. Typically used for unit testing
          # validate    Hibernate only validates whether the tables and columns exist, otherwise it throws an exception
          # none        this value effectively turns off the DDL generation
          auto: update
