buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin"
    }
}

plugins {
    // Like --scan option to gradle; should be placed before any other plugins
    id 'com.gradle.build-scan' version '2.4'

    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'

    //
    id "org.jetbrains.kotlin.kapt" version "1.3.41"

    //
    // needed for Bean Validation https://docs.micronaut.io/latest/guide/index.html#beanValidation
    // unsure, if there is another reason for it
    // TODO: configure allopen to only open @Validated classes
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.41"

    // Gradle dependency update checker; run by "dependencyUpdates" task
    id "com.github.ben-manes.versions" version "0.22.0"

    // Release version with "gradle release"
    id 'net.researchgate.release' version '2.8.1'

    // Create start scripts
    // Is executed on "build" task but not on e.g. "jar" task
    id 'application'

    // Bundle all dependencies into one fat shadowed jar
    // (Gets automatically triggered when application plugin is present)
    id 'com.github.johnrengelman.shadow' version '5.1.0'
}

group 'de.debuglevel.greeter'

// application plugin configuration
applicationName = "Greeter Microservice"
mainClassName = "de.debuglevel.greeter.Application"

repositories {
    jcenter()
    maven {
        url "https://dl.bintray.com/debuglevel/maven"
    }
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    //implementation "org.jetbrains.kotlin:kotlin-reflect"

    // Tests
    // specific versions provided by Micronaut BOM
    /// JUnit
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    //testCompile 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    //testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
    //testCompile 'org.junit.jupiter:junit-jupiter-params:5.5.1'
    /// Mockito
    testImplementation "org.mockito:mockito-junit-jupiter:2.22.0"
    /// Spek
//    testImplementation "org.jetbrains.kotlin:kotlin-test"
//    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spekVersion"
//    testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:$spekVersion"
    /// Assertions
    testCompile 'org.assertj:assertj-core:3.13.2'

    // Logging
    // See http://saltnlight5.blogspot.com/2013/08/how-to-configure-slf4j-with-different.html for a quick introduction to slf4j
//    implementation 'io.github.microutils:kotlin-logging:1.7.4'
    implementation 'io.github.microutils:kotlin-logging:1.7.4'
//    implementation 'org.slf4j:slf4j-api:1.7.25'
//    implementation 'org.slf4j:slf4j-simple:1.7.25'
    // TODO: used by micronaut-cli by default; use it too?
     runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    // Configuration
//    implementation "com.natpryce:konfig:1.6.10.0"

    // Spark (REST server)
//    implementation "com.sparkjava:spark-kotlin:1.0.0-alpha"
//    implementation 'de.debuglevel.sparkmicroserviceutils:sparkmicroserviceutils:0.0.24'

    // Micronaut
    /// Bill of Materials, which defines dependency versions
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    /// Validation
    kapt "io.micronaut:micronaut-validation"
    //implementation 'io.micronaut.configuration:micronaut-hibernate-validator' // if full Bean Validator 2.0 compliance is needed
    /// Server
    implementation "io.micronaut:micronaut-http-server-netty"
    /// Client
    implementation "io.micronaut:micronaut-http-client"
    /// Inversion of Control / Dependency Injection
    kapt "io.micronaut:micronaut-inject-java"
    kaptTest "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    /// Management & Monitoring
    /// automatically provides the /health endpoint publicly, and some other with authentication
    compile 'io.micronaut:micronaut-management'
    /// Tests
    //testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
//    testImplementation "org.jetbrains.spek:spek-api:1.1.5"
    //testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
//    testRuntimeOnly "org.jetbrains.spek:spek-junit-platform-engine:1.1.5"

    implementation "io.micronaut:micronaut-runtime"
    implementation "javax.annotation:javax.annotation-api"
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
    
    // JSON
    //implementation 'com.google.code.gson:gson:2.8.5'

    // khttp (HTTP client)
    //implementation 'khttp:khttp:0.1.0'

    // Template Engine
    //implementation 'com.sparkjava:spark-template-mustache:2.7.1'
}

// Java configuration
java {
    sourceCompatibility = JavaVersion.VERSION_1_8 // Source is Java 8 code
    targetCompatibility = JavaVersion.VERSION_1_8 // Byte code will be JVM 8
}

// Kotlin configuration (implies compileKotlin and compileTestKotlin)
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8 // Byte code will be JVM 8
    }
}

// jar configuration
jar {
    // add Manifest to jar
    manifest {
        attributes 'Implementation-Title': applicationName,
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
}

// Configuration of com.gradle.build-scan plugin
buildScan {
    // Accept the license agreement for com.gradle.build-scan plugin
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'

    // Always publish scan (no more need for --scan option)
    publishAlways()
}

// Configuration of net.researchgate.release plugin
release {
    failOnCommitNeeded = false
    failOnUnversionedFiles = false
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

// For Heroku: create a "stage" task which simply executes "build"
task stage(dependsOn: ['clean', 'build'])
build.mustRunAfter clean
