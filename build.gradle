buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin"
    }
}

plugins {
    // Like --scan option to gradle; should be placed before any other plugins
    id 'com.gradle.build-scan' version '2.1'

    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'

    // Gradle dependency update checker; run by "dependencyUpdates" task
    id "com.github.ben-manes.versions" version "0.20.0"

    // Release version with "gradle release"
    id 'net.researchgate.release' version '2.6.0'

    // Create start scripts
    // Is executed on "build" task but not on e.g. "jar" task
    id 'application'

    // Bundle all dependencies into one fat shadowed jar
    // (Gets automatically triggered when application plugin is present)
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

group 'de.debuglevel.greeting'

// application plugin configuration
applicationName = "Greeting Microservice"
mainClassName = "de.debuglevel.greeting.rest.MainKt"

repositories {
    jcenter()
    maven {
        url "https://dl.bintray.com/debuglevel/maven"
    }
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // Tests
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.4.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.4.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.4.0'
    testCompile 'org.assertj:assertj-core:3.12.0'

    // Logging
    // See http://saltnlight5.blogspot.com/2013/08/how-to-configure-slf4j-with-different.html for a quick introduction to slf4j
    implementation 'io.github.microutils:kotlin-logging:1.6.25'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.slf4j:slf4j-simple:1.7.25'

    // Configuration
    implementation "com.natpryce:konfig:1.6.10.0"

    // Spark (REST server)
    implementation "com.sparkjava:spark-kotlin:1.0.0-alpha"
    implementation 'de.debuglevel.sparkmicroserviceutils:sparkmicroserviceutils:0.0.22'

    // JSON
    implementation 'com.google.code.gson:gson:2.8.5'

    // khttp (HTTP client)
    //implementation 'khttp:khttp:0.10.1'

    // Template Engine
    //implementation 'com.sparkjava:spark-template-mustache:2.7.1'
}

// Java configuration
java {
    sourceCompatibility = JavaVersion.VERSION_1_8 // Source is Java 8 code
    targetCompatibility = JavaVersion.VERSION_1_8 // Byte code will be JVM 8
}

// Kotlin configuration (implies compileKotlin and compileTestKotlin)
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8 // Byte code will be JVM 8
    }
}

// jar configuration
jar {
    // add Manifest to jar
    manifest {
        attributes 'Implementation-Title': applicationName,
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
}

// Configuration of com.gradle.build-scan plugin
buildScan {
    // Accept the license agreement for com.gradle.build-scan plugin
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'

    // Always publish scan (no more need for --scan option)
    publishAlways()
}

// Configuration of net.researchgate.release plugin
release {
    failOnCommitNeeded = false
    failOnUnversionedFiles = false
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}

// For Heroku: create a "stage" task which simply executes "build"
task stage(dependsOn: ['clean', 'build'])
build.mustRunAfter clean